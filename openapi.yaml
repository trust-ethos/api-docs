openapi: 3.1.0
info:
  title: Ethos API
  description: API for interacting with the Ethos network
  version: 1.0.0
  contact:
    name: Ethos Team
    url: https://ethos.network
servers:
  - url: https://api.ethos.network
    description: Production server
paths:
  /api/v1/privy-logins:
    post:
      summary: Create a Privy login
      description: |
        Creates or updates a Privy login record in the database. This endpoint is used
        to synchronize Privy authentication state with the Ethos backend.

        The endpoint verifies the Privy ID token and creates/updates a database record
        with the user's Privy ID, connected wallets, and Twitter user ID if available.

        A valid Privy session is required (via the Authorization header containing a Privy token).
      operationId: createPrivyLogin
      tags:
        - Authentication
      security:
        - privyAuth: []
      parameters:
        - in: header
          name: X-Privy-Id-Token
          required: true
          schema:
            type: string
          description: The Privy ID token for the authenticated user
      responses:
        '200':
          description: Successfully created/updated Privy login
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/PrivyLoginResponse
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/ErrorResponse
              examples:
                invalidParams:
                  value:
                    ok: false
                    error:
                      code: BAD_PARAMETERS
                      message: Invalid parameters
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/ErrorResponse
              examples:
                missingToken:
                  value:
                    ok: false
                    error:
                      code: UNAUTHORIZED
                      message: Missing privy token
                invalidToken:
                  value:
                    ok: false
                    error:
                      code: UNAUTHORIZED
                      message: Invalid privy token
                invalidIdToken:
                  value:
                    ok: false
                    error:
                      code: UNAUTHORIZED
                      message: Invalid privy ID token
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/ErrorResponse
              examples:
                invalidUser:
                  value:
                    ok: false
                    error:
                      code: FORBIDDEN
                      message: Invalid user
                invalidLinkedAccounts:
                  value:
                    ok: false
                    error:
                      code: FORBIDDEN
                      message: Invalid linked accounts
  /api/v1/privy-logins/tokens:
    post:
      summary: Save OAuth2 tokens for a Privy login
      description: |
        Saves OAuth2 tokens for the current authenticated Privy user.
        This is used to store tokens for external providers (e.g., Twitter)
        that can be used for API calls on behalf of the user.

        A valid Privy session is required (via the Authorization header containing a Privy token).
      operationId: savePrivyOAuth2Tokens
      tags:
        - Authentication
      security:
        - privyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/auth.yaml#/PrivyOAuth2TokensRequest
      responses:
        '200':
          description: Successfully saved OAuth2 tokens
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/PrivyLoginResponse
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/ErrorResponse
              examples:
                invalidParams:
                  value:
                    ok: false
                    error:
                      code: BAD_PARAMETERS
                      message: Invalid parameters
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../schemas/auth.yaml#/ErrorResponse
              examples:
                missingToken:
                  value:
                    ok: false
                    error:
                      code: UNAUTHORIZED
                      message: Missing privy token
                invalidToken:
                  value:
                    ok: false
                    error:
                      code: UNAUTHORIZED
                      message: Invalid privy token
  /api/v1/attestations:
    post:
      summary: Query Attestations
      description: |
        Retrieves attestations based on specified filters.
        Attestations are verifications of a user's identity on external services like X (Twitter).
      operationId: getAttestationsQuery
      tags:
        - Attestations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/attestations.yaml#/AttestationQueryRequest
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/attestations.yaml#/AttestationQueryResponse
        '400':
          description: Bad request - must specify either attestationHashes or profileIds
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: BAD_REQUEST
                      message:
                        type: string
                        example: Must specify either attestationHashes or profileIds
                      fields:
                        type: array
                        items:
                          type: string
                        example:
                          - attestationHashes
                          - profileIds
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: UNEXPECTED_ERROR
                      message:
                        type: string
                        example: Something went wrong! Please try again later.
  /api/v1/attestations/extended:
    post:
      summary: Query Extended Attestations
      description: |
        Retrieves attestations with extended information, such as usernames, display names,
        and avatar URLs for social media accounts.
      operationId: getExtendedAttestationsQuery
      tags:
        - Attestations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/attestations.yaml#/ExtendedAttestationQueryRequest
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/attestations.yaml#/ExtendedAttestationQueryResponse
        '400':
          description: Bad request - must specify either attestationHashes or profileIds
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: BAD_REQUEST
                      message:
                        type: string
                        example: Must specify either attestationHashes or profileIds
                      fields:
                        type: array
                        items:
                          type: string
                        example:
                          - attestationHashes
                          - profileIds
        '404':
          description: Attestation details not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: NOT_FOUND
                      message:
                        type: string
                        example: Attestation details not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: UNEXPECTED_ERROR
                      message:
                        type: string
                        example: Something went wrong! Please try again later.
  /api/v1/signatures/create-attestation:
    post:
      summary: Create Attestation Signature
      description: |
        Creates a cryptographic signature that can be used to register an attestation on-chain.
        This endpoint allows users to verify ownership of social accounts like X (Twitter).

        A valid Privy session and profile are required.
      operationId: createAttestationSignature
      tags:
        - Attestations
      security:
        - privyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/attestations.yaml#/CreateAttestationSignatureRequest
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/attestations.yaml#/CreateAttestationSignatureResponse
        '400':
          description: Bad request - social account already connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: BAD_REQUEST
                      message:
                        type: string
                        example: Social account already connected
                      fields:
                        type: array
                        items:
                          type: string
                        example:
                          - service
                          - account
        '401':
          description: Unauthorized - invalid privy session
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: UNAUTHORIZED
                      message:
                        type: string
                        example: Invalid privy session
        '403':
          description: Forbidden - no Twitter account connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: FORBIDDEN
                      message:
                        type: string
                        example: No Twitter account connected
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: UNEXPECTED_ERROR
                      message:
                        type: string
                        example: Something went wrong! Please try again later.
  /api/v1/profiles:
    post:
      summary: Query Profiles
      description: Queries profiles based on provided criteria such as profile IDs, addresses, or nicknames.
      tags:
        - Profiles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                profileIds:
                  type: array
                  items:
                    type: integer
                  description: Array of profile IDs to query (max 100)
                addresses:
                  type: array
                  items:
                    type: string
                  description: Array of Ethereum addresses to query (max 100)
                nicknames:
                  type: array
                  items:
                    type: string
                  description: Array of profile nicknames to query
                ensNames:
                  type: array
                  items:
                    type: string
                  description: Array of ENS names to query
                archived:
                  type: boolean
                  description: Whether to include archived profiles
                includeShadowProfiles:
                  type: boolean
                  description: Whether to include shadow profiles
                  default: false
                useCache:
                  type: boolean
                  description: Whether to use cached results
                  default: true
                pagination:
                  $ref: ../schemas/common.yaml#/PaginationParams
              oneOf:
                - required:
                    - profileIds
                - required:
                    - addresses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: ../schemas/common.yaml#/PaginatedResponse
                  - type: object
                    properties:
                      values:
                        type: array
                        items:
                          $ref: ../schemas/profiles.yaml#/Profile
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/profiles/recent:
    post:
      summary: Recent Profiles
      description: Retrieves a list of recently created profiles, ordered by creation date in descending order.
      tags:
        - Profiles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                archived:
                  type: boolean
                  description: Whether to include archived profiles
                  default: false
                limit:
                  type: integer
                  description: Maximum number of profiles to return
                  default: 10
                  maximum: 100
                offset:
                  type: integer
                  description: Number of profiles to skip (for pagination)
                  default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: ../schemas/common.yaml#/PaginatedResponse
                  - type: object
                    properties:
                      values:
                        type: array
                        items:
                          $ref: ../schemas/profiles.yaml#/Profile
  /api/v1/profiles/directory:
    get:
      summary: Profile Directory
      description: Retrieves a paginated directory of non-archived profiles with various sorting options.
      tags:
        - Profiles
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Maximum number of profiles to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of profiles to skip (for pagination)
        - name: sortField
          in: query
          schema:
            type: string
            enum:
              - score
              - xp
              - createdAt
            default: score
          description: Field to sort by
        - name: sortDirection
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort direction
        - name: archived
          in: query
          schema:
            type: boolean
            default: false
          description: Whether to include archived profiles
        - name: inviteFilter
          in: query
          schema:
            type: string
            enum:
              - hasInvites
              - noInvites
          description: Filter by invite availability
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: ../schemas/common.yaml#/PaginatedResponse
                  - type: object
                    properties:
                      values:
                        type: array
                        items:
                          $ref: ../schemas/profiles.yaml#/ProfileWithActor
  /api/v1/profiles/credibility-leaderboard:
    get:
      summary: Credibility Leaderboard
      description: Retrieves a leaderboard of profiles sorted by credibility score, with optional ordering.
      tags:
        - Profiles
      parameters:
        - name: order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Maximum number of profiles to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../schemas/profiles.yaml#/CredibilityProfile
  /api/v1/profiles/stats:
    get:
      summary: Profile Stats
      description: Retrieves aggregate statistics about profiles on the network.
      tags:
        - Profiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles.yaml#/ProfileStats
  /api/v1/profiles/xp-leaderboard:
    get:
      summary: XP Leaderboard
      description: Retrieves a leaderboard of profiles sorted by XP (experience points), with optional time filtering.
      tags:
        - Profiles
      parameters:
        - name: since
          in: query
          schema:
            type: string
            format: date-time
          description: ISO date string to filter XP earned since a specific date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../schemas/profiles.yaml#/XpProfile
  /api/v1/profiles/with-x-attestation:
    get:
      summary: Profiles with X Attestation
      description: Retrieves profiles that have a specific X (Twitter) attestation.
      tags:
        - Profiles
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 1000
          description: Maximum number of profiles to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of profiles to skip (for pagination)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: ../schemas/common.yaml#/PaginatedResponse
                  - type: object
                    properties:
                      values:
                        type: array
                        items:
                          $ref: ../schemas/profiles.yaml#/ProfileWithXAttestation
  /api/v1/activities/{type}/{id}:
    get:
      summary: Get Activity
      description: Retrieves a single activity by its type and ID or transaction hash. If a transaction hash is provided, it will process the blockchain event and retrieve the corresponding activity.
      tags:
        - Activities
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - vouch
              - review
              - attestation
              - slash
              - invitation-accepted
              - unvouch
          description: Type of activity
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Activity ID or transaction hash
        - name: currentUserProfileId
          in: query
          schema:
            type: integer
          description: Profile ID of the current user (for retrieving user-specific data like votes)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/activities.yaml#/ActivityInfo
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/activities:
    post:
      summary: Get Multiple Activities
      description: Retrieves multiple activities by their type and IDs. This is a bulk endpoint that allows querying for various activities at once.
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: array
                  items:
                    type: integer
                  description: Array of review activity IDs
                vouch:
                  type: array
                  items:
                    type: integer
                  description: Array of vouch activity IDs
                unvouch:
                  type: array
                  items:
                    type: integer
                  description: Array of unvouch activity IDs
                attestation:
                  type: array
                  items:
                    type: integer
                  description: Array of attestation activity IDs
                invitation-accepted:
                  type: array
                  items:
                    type: integer
                  description: Array of invitation accepted activity IDs
                currentUserProfileId:
                  type: integer
                  nullable: true
                  description: Profile ID of the current user (for retrieving user-specific data like votes)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../schemas/activities.yaml#/ActivityInfo
  /api/v1/activities/unified:
    post:
      summary: Get Unified Activities
      description: Retrieves a unified paginated list of activities based on various filters. This endpoint provides more advanced filtering and pagination options than the regular activities endpoint.
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: array
                  items:
                    type: string
                    enum:
                      - vouch
                      - review
                      - attestation
                      - slash
                      - invitation-accepted
                      - unvouch
                  description: Array of activity types to include (defaults to all types)
                target:
                  type: string
                  description: User key (address, profile ID, nickname, ENS) to filter activities by
                direction:
                  type: string
                  enum:
                    - author
                    - subject
                  description: Direction of activities to retrieve - "author" (activities by the target) or "subject" (activities about the target)
                dayRange:
                  type: integer
                  minimum: 1
                  maximum: 90
                  description: Filter activities to those created in the last N days (1-90)
                currentUserProfileId:
                  type: integer
                  nullable: true
                  description: Profile ID of the current user (for retrieving user-specific data like votes)
                orderBy:
                  type: object
                  required:
                    - field
                    - direction
                  properties:
                    field:
                      type: string
                      enum:
                        - timestamp
                        - votes
                        - controversial
                        - hot
                        - rising
                      default: timestamp
                      description: Field to sort by
                    direction:
                      type: string
                      enum:
                        - asc
                        - desc
                      default: desc
                      description: Sort direction
                pagination:
                  type: object
                  required:
                    - limit
                  properties:
                    limit:
                      type: integer
                      default: 10
                      description: Maximum number of activities to return per type
                    cursors:
                      type: object
                      additionalProperties:
                        type: string
                      description: Cursor tokens for pagination (keyed by activity type)
                excludeHistorical:
                  type: boolean
                  default: false
                  description: Whether to exclude historical activities
                cache:
                  type: boolean
                  default: false
                  description: Whether to use cached results
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    type: array
                    items:
                      $ref: ../schemas/activities.yaml#/ActivityInfo
                  pagination:
                    type: object
                    properties:
                      cursors:
                        type: object
                        additionalProperties:
                          type: string
                        description: Next cursor tokens for pagination (keyed by activity type)
                      hasMore:
                        type: object
                        additionalProperties:
                          type: boolean
                        description: Whether there are more activities available (keyed by activity type)
  /api/v1/activities/actor/{userkey}:
    get:
      summary: Get Activity Actor
      description: Retrieves actor information for a specific user. Actors represent users in the context of activities.
      tags:
        - Activities
      parameters:
        - name: userkey
          in: path
          required: true
          schema:
            type: string
          description: User identifier (address, profile ID, nickname, or ENS name)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/activities.yaml#/ActivityActor
        '404':
          description: Actor not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/activities/actors:
    post:
      summary: Get Bulk Actors
      description: Retrieves actor information for multiple users. This is a bulk endpoint that allows querying for various actors at once.
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userkeys
              properties:
                userkeys:
                  type: array
                  items:
                    type: string
                  description: Array of user identifiers (addresses, profile IDs, nicknames, or ENS names)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../schemas/activities.yaml#/ActivityActor
  /api/v1/activities/votes:
    post:
      summary: Get Votes
      description: Retrieves vote information for multiple activities. This endpoint allows clients to fetch both the vote counts and the current user's votes for various activities.
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: array
                  items:
                    type: integer
                  description: Array of review activity IDs
                vouch:
                  type: array
                  items:
                    type: integer
                  description: Array of vouch activity IDs
                discussion:
                  type: array
                  items:
                    type: integer
                  description: Array of discussion activity IDs
                attestation:
                  type: array
                  items:
                    type: integer
                  description: Array of attestation activity IDs
                slash:
                  type: array
                  items:
                    type: integer
                  description: Array of slash activity IDs
                connectedProfile:
                  type: integer
                  description: Profile ID of the connected user (to get their votes)
                includeArchived:
                  type: boolean
                  default: false
                  description: Whether to include archived activities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: ../schemas/activities.yaml#/BulkVotes
  /api/v1/activities/invite/accepted-by/{profileId}:
    get:
      summary: Get Invites Accepted By
      description: Retrieves a list of users who have accepted invitations from a specific profile.
      tags:
        - Activities
      parameters:
        - name: profileId
          in: path
          required: true
          schema:
            type: integer
          description: Profile ID to get accepted invites for
        - name: limit
          in: query
          schema:
            type: integer
          description: Maximum number of results to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../schemas/activities.yaml#/ActivityActor
  /api/v1/vouches:
    post:
      summary: Query Vouches
      description: Retrieves vouches based on specified filters and pagination parameters.
      operationId: queryVouches
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/VouchQueryRequest
      responses:
        '200':
          description: Successful response with vouches data
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/VouchQueryResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/count:
    post:
      summary: Count Vouches
      description: Counts vouches based on specified filters.
      operationId: countVouches
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/VouchCountRequest
      responses:
        '200':
          description: Successful response with count of vouches
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/VouchCountResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/stats:
    post:
      summary: Get Vouch Statistics
      description: Retrieves statistics about vouches for a specific user.
      operationId: getVouchStats
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/VouchStatsRequest
      responses:
        '200':
          description: Successful response with vouch statistics
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/VouchStatsResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/vouched-ethereum:
    post:
      summary: Get Vouched Ethereum
      description: Retrieves the total amount of ETH vouched for a specific user.
      operationId: getVouchedEthereum
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/VouchedEthereumRequest
      responses:
        '200':
          description: Successful response with vouched ETH amount
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/VouchedEthereumResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/most-credible-vouchers:
    post:
      summary: Get Most Credible Vouchers
      description: Retrieves the most credible vouchers for a specific user.
      operationId: getMostCredibleVouchers
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/MostCredibleVouchersRequest
      responses:
        '200':
          description: Successful response with most credible vouchers
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/MostCredibleVouchersResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/mutual-vouchers:
    get:
      summary: Get Mutual Vouchers
      description: Retrieves users who have mutual vouches with the specified user.
      operationId: getMutualVouchers
      tags:
        - Vouches
      parameters:
        - name: userkey
          in: query
          required: true
          description: User identifier (address, profile ID, or attestation)
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of mutual vouchers to return
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response with mutual vouchers
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/MutualVouchersResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/vouches/rewards:
    post:
      summary: Get Vouch Rewards
      description: Retrieves rewards earned from vouches for specified users.
      operationId: getVouchRewards
      tags:
        - Vouches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/vouches.yaml#/VouchRewardsRequest
      responses:
        '200':
          description: Successful response with vouch rewards
          content:
            application/json:
              schema:
                $ref: ../schemas/vouches.yaml#/VouchRewardsResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/reviews:
    post:
      summary: Query Reviews
      description: Retrieves reviews based on specified filters and pagination parameters.
      operationId: queryReviews
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/reviews.yaml#/ReviewQueryRequest
      responses:
        '200':
          description: Successful response with reviews data
          content:
            application/json:
              schema:
                $ref: ../schemas/reviews.yaml#/ReviewQueryResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/reviews/count:
    post:
      summary: Count Reviews
      description: Counts reviews based on specified filters.
      operationId: countReviews
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/reviews.yaml#/ReviewCountRequest
      responses:
        '200':
          description: Successful response with count of reviews
          content:
            application/json:
              schema:
                $ref: ../schemas/reviews.yaml#/ReviewCountResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/reviews/stats:
    post:
      summary: Get Review Statistics
      description: Retrieves statistics about reviews for a specific user.
      operationId: getReviewStats
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/reviews.yaml#/ReviewStatsRequest
      responses:
        '200':
          description: Successful response with review statistics
          content:
            application/json:
              schema:
                $ref: ../schemas/reviews.yaml#/ReviewStatsResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/reviews/stats/bulk:
    post:
      summary: Get Bulk Review Statistics
      description: Retrieves review statistics for multiple users in a single request.
      operationId: getBulkReviewStats
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/reviews.yaml#/ReviewStatsBulkRequest
      responses:
        '200':
          description: Successful response with bulk review statistics
          content:
            application/json:
              schema:
                $ref: ../schemas/reviews.yaml#/ReviewStatsBulkResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/replies/query:
    post:
      summary: Query Replies
      description: Retrieves replies based on specified filters and pagination parameters.
      operationId: queryReplies
      tags:
        - Replies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/replies.yaml#/ReplyQueryRequest
      responses:
        '200':
          description: Successful response with replies data
          content:
            application/json:
              schema:
                $ref: ../schemas/replies.yaml#/ReplyQueryResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/replies/summary:
    post:
      summary: Get Reply Summary
      description: Retrieves a summary of replies for the specified parent items, including the total count of replies and whether the current user has participated in the discussion.
      operationId: getReplySummary
      tags:
        - Replies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/replies.yaml#/ReplySummaryRequest
      responses:
        '200':
          description: Successful response with reply summaries
          content:
            application/json:
              schema:
                $ref: ../schemas/replies.yaml#/ReplySummaryResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/notifications/user-fcm-token:
    post:
      summary: Update User FCM Token
      description: |
        Updates or creates a Firebase Cloud Messaging (FCM) token for the authenticated user's device.
        This token is used to send push notifications to the user's device.
        The API will store up to 10 tokens per user (for different devices).
      operationId: updateUserFCMToken
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/notifications.yaml#/UpdateUserFCMTokenRequest
      responses:
        '200':
          description: Successfully processed the FCM token
          content:
            application/json:
              schema:
                $ref: ../schemas/notifications.yaml#/UpdateUserFCMTokenResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '401':
          description: Unauthorized - user must be authenticated
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '403':
          description: Forbidden - user must have an Ethos profile
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/users/search:
    get:
      summary: Search Users
      description: |
        Search for users by name, username, or address.
        Results are ordered by credibility score in descending order, then by display name.
      operationId: searchUsers
      tags:
        - Users
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 100
          description: Search query for finding users by name, username, or address
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip for pagination
      responses:
        '200':
          description: Successful response with user search results
          content:
            application/json:
              schema:
                $ref: ../schemas/users.yaml#/UserSearchResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/users/{userkey}/stats:
    get:
      summary: Get User Stats
      description: |
        Retrieve comprehensive statistics for a user, including review and vouch metrics.
        Optionally filter by date range.
      operationId: getUserStats
      tags:
        - Users
      parameters:
        - name: userkey
          in: path
          required: true
          schema:
            type: string
          description: User identifier (profile ID, address, or username)
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Optional start date for filtering stats (format YYYY-MM-DD)
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Optional end date for filtering stats (format YYYY-MM-DD)
      responses:
        '200':
          description: Successful response with user statistics
          content:
            application/json:
              schema:
                $ref: ../schemas/users.yaml#/UserStatsResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/extension/user/{twitterUsername}/info:
    get:
      summary: Get Twitter User Info (Extension)
      description: |
        Retrieve comprehensive information about a Twitter user for the browser extension.
        This endpoint returns combined data including profile details, vouch and review statistics,
        open slashes, and market information.

        This endpoint is primarily used by the Ethos browser extension and is considered deprecated.
        New applications should use the individual endpoints for specific information.
      operationId: getExtensionUserInfo
      deprecated: true
      tags:
        - Users
      parameters:
        - name: twitterUsername
          in: path
          required: true
          schema:
            type: string
          description: Twitter (X) username to look up information for
      responses:
        '200':
          description: Successful response with Twitter user information
          content:
            application/json:
              schema:
                $ref: ../schemas/users.yaml#/ExtensionUserInfoResponse
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ../schemas/common.yaml#/Error
  /api/v1/transactions/recent:
    post:
      tags:
        - Connections
      summary: Get recent transactions between two addresses
      description: |
        Retrieve a list of recent transactions between a user's wallet address and another address.

        This endpoint can be used to view the transaction history between two addresses, including
        information about transaction details, amounts, and timestamps.
      operationId: getRecentTransactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/connections.yaml#/RecentTransactionsRequest
      responses:
        '200':
          description: Successfully retrieved recent transactions
          content:
            application/json:
              schema:
                $ref: ../schemas/connections.yaml#/RecentTransactionsResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '401':
          $ref: ../components.yaml#/responses/Unauthorized
        '403':
          $ref: ../components.yaml#/responses/Forbidden
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
  /api/v1/interactions/recent:
    post:
      tags:
        - Connections
      summary: Get recent interactions for an address
      description: |
        Retrieve a list of recent interactions for a given wallet address.

        This endpoint returns addresses that the specified wallet has interacted with,
        along with transaction history and potentially additional relationship data like
        reviews and vouches.
      operationId: getRecentInteractions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/connections.yaml#/RecentInteractionsRequest
      responses:
        '200':
          description: Successfully retrieved recent interactions
          content:
            application/json:
              schema:
                $ref: ../schemas/connections.yaml#/RecentInteractionsResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '401':
          $ref: ../components.yaml#/responses/Unauthorized
        '403':
          $ref: ../components.yaml#/responses/Forbidden
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
  /api/v1/search:
    get:
      tags:
        - Search
      summary: Search for profiles, users, and addresses
      description: |
        Performs a unified search across profiles, users, Twitter accounts, and ENS names/addresses.

        This endpoint returns actors that match the search query, sorted by relevance. The search
        algorithm prioritizes exact matches first, followed by similar matches, and then considers
        factors like having a profile, username, real name, address, and score.
      operationId: search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 100
          description: Search query for finding profiles, users, ENS names, or addresses
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip for pagination
      responses:
        '200':
          description: Successful search results
          content:
            application/json:
              schema:
                $ref: ../schemas/search.yaml#/SearchQueryResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
  /api/v1/markets/search:
    get:
      tags:
        - Markets
        - Search
      summary: Search for markets
      description: |
        Search for markets by profile name, username, or other identifiers.

        If no query is provided, the endpoint returns all available markets.
      operationId: searchMarkets
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: Optional search query for finding markets. If not provided, returns all markets.
      responses:
        '200':
          description: Successful market search results
          content:
            application/json:
              schema:
                $ref: ../schemas/search.yaml#/MarketSearchQueryResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
  /api/v1/invitations:
    post:
      tags:
        - Invitations
      summary: Query invitations
      description: |
        Retrieves a paginated list of invitations sent by a specific profile.

        This endpoint returns invitation details including status, recipient address, date sent,
        and date accepted (if applicable).
      operationId: queryInvitations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../schemas/invitations.yaml#/InvitationQueryRequest
      responses:
        '200':
          description: Successfully retrieved invitations
          content:
            application/json:
              schema:
                $ref: ../schemas/invitations.yaml#/InvitationQueryResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
  /api/v1/invitations/pending/{address}:
    get:
      tags:
        - Invitations
      summary: Get pending invitations for an address
      description: |
        Retrieves a list of pending invitations for a specific Ethereum address.

        The response includes the profile IDs of users who have invited the address,
        along with the potential score impact if the invitation is accepted.
      operationId: getPendingInvitations
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
            format: address
          description: The Ethereum address to check for pending invitations
      responses:
        '200':
          description: Successfully retrieved pending invitations
          content:
            application/json:
              schema:
                $ref: ../schemas/invitations.yaml#/PendingInvitationsResponse
        '400':
          $ref: ../components.yaml#/responses/BadRequest
        '500':
          $ref: ../components.yaml#/responses/InternalServerError
components:
  securitySchemes:
    privyAuth:
      type: http
      scheme: bearer
      description: Privy authentication token, obtained through the Privy authentication flow.
  schemas:
    PrivyLoginRequest:
      type: object
      required:
        - privyIdToken
      properties:
        privyIdToken:
          type: string
          description: Privy ID token used to verify the user identity.
    PrivyLoginResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful or not.
          example: true
        data:
          type: object
          description: Empty data object returned on success
          nullable: true
    PrivyOAuth2TokensRequest:
      type: object
      required:
        - provider
        - accessToken
        - refreshToken
        - scopes
      properties:
        provider:
          type: string
          description: The OAuth provider (e.g., 'twitter')
          enum:
            - twitter
        accessToken:
          type: string
          description: The OAuth access token
        refreshToken:
          type: string
          description: The OAuth refresh token
        scopes:
          type: array
          description: List of scopes granted by the user
          items:
            type: string
    AuthTokenClaims:
      type: object
      description: Claims in a verified Privy authentication token
      properties:
        userId:
          type: string
          description: The unique user ID in the Privy system
        exp:
          type: integer
          description: The expiration timestamp of the token
        iat:
          type: integer
          description: The issued at timestamp of the token
    ErrorResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: Always false for error responses
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
              example: UNAUTHORIZED
            message:
              type: string
              description: Human-readable error message
              example: Missing privy token
            reqId:
              type: string
              description: Request ID for debugging
              example: 7f3c40a3-1e2a-4b5d-9c8f-0e7d6a5b4c3a
    AttestationQueryRequest:
      type: object
      properties:
        profileIds:
          type: array
          description: List of profile IDs to filter attestations by
          items:
            type: integer
        attestationHashes:
          type: array
          description: List of attestation hashes to retrieve
          items:
            type: string
        archived:
          type: boolean
          description: Whether to include archived attestations
        orderBy:
          type: object
          description: Sorting options for the results
          properties:
            createdAt:
              type: string
              enum:
                - asc
                - desc
              description: Sort by creation time
            updatedAt:
              type: string
              enum:
                - asc
                - desc
              description: Sort by update time
        pagination:
          type: object
          required:
            - limit
            - offset
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of attestations to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of attestations to skip
    AttestationQueryResponse:
      type: object
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          required:
            - values
            - limit
            - offset
            - total
          properties:
            values:
              type: array
              items:
                $ref: '#/Attestation'
              description: List of attestations matching the query
            limit:
              type: integer
              description: Maximum number of attestations returned
              example: 10
            offset:
              type: integer
              description: Number of attestations skipped
              example: 0
            total:
              type: integer
              description: Total count of attestations matching the query
              example: 42
    Attestation:
      type: object
      required:
        - id
        - hash
        - service
        - account
        - profileId
        - createdAt
        - archived
      properties:
        id:
          type: integer
          description: Unique identifier for the attestation
          example: 123
        hash:
          type: string
          description: Unique hash of the attestation (service+account)
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
        service:
          type: string
          description: The service being attested to (e.g., x.com)
          example: x.com
        account:
          type: string
          description: The account ID on the service
          example: '12345678'
        profileId:
          type: integer
          description: Profile ID that owns this attestation
          example: 456
        createdAt:
          type: integer
          description: Unix timestamp of when the attestation was created
          example: 1625097600
        archived:
          type: boolean
          description: Whether this attestation is archived
          example: false
    ExtendedAttestationQueryRequest:
      type: object
      properties:
        profileIds:
          type: array
          description: List of profile IDs to filter attestations by
          items:
            type: integer
        attestationHashes:
          type: array
          description: List of attestation hashes to retrieve
          items:
            type: string
        archived:
          type: boolean
          description: Whether to include archived attestations
        orderBy:
          type: object
          description: Sorting options for the results
          properties:
            createdAt:
              type: string
              enum:
                - asc
                - desc
              description: Sort by creation time
            updatedAt:
              type: string
              enum:
                - asc
                - desc
              description: Sort by update time
        pagination:
          type: object
          required:
            - limit
            - offset
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of attestations to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of attestations to skip
    ExtendedAttestationQueryResponse:
      type: object
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          required:
            - values
            - limit
            - offset
            - total
          properties:
            values:
              type: array
              items:
                $ref: '#/ExtendedAttestation'
              description: List of extended attestations matching the query
            limit:
              type: integer
              description: Maximum number of attestations returned
              example: 10
            offset:
              type: integer
              description: Number of attestations skipped
              example: 0
            total:
              type: integer
              description: Total count of attestations matching the query
              example: 42
    ExtendedAttestation:
      type: object
      required:
        - attestation
        - extra
      properties:
        attestation:
          $ref: '#/Attestation'
          description: The basic attestation information
        extra:
          type: object
          description: Additional information related to the attestation
          properties:
            username:
              type: string
              description: Username on the service
              example: alice_twitter
            name:
              type: string
              description: Display name on the service
              example: Alice
            avatar:
              type: string
              description: URL to the profile image
              example: https://pbs.twimg.com/profile_images/1234567890/avatar.jpg
    CreateAttestationSignatureRequest:
      type: object
      required:
        - service
        - connectedAddress
      properties:
        service:
          type: string
          enum:
            - x.com
          description: The service to create an attestation for
          example: x.com
        connectedAddress:
          type: string
          description: The wallet address of the connected user
          example: '0x1234567890abcdef1234567890abcdef12345678'
    CreateAttestationSignatureResponse:
      type: object
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          required:
            - randValue
            - signature
            - account
            - evidence
          properties:
            randValue:
              type: integer
              description: Random value used for signature generation
              example: 1234567890
            signature:
              type: string
              description: The generated signature for creating the attestation
              example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
            account:
              type: string
              description: The account ID on the service being attested
              example: '12345678'
            evidence:
              type: string
              description: Evidence of the attestation in JSON format
              example: '{"source":"privy","type":"OAuth2","id":"user-123","approver":"ethos.network"}'
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
    Profile:
      type: object
      properties:
        id:
          type: integer
          description: Profile ID
        address:
          type: string
          description: Ethereum address
        nickname:
          type: string
          description: Profile nickname
        ensName:
          type: string
          description: ENS name (if registered)
        avatarUrl:
          type: string
          description: URL to avatar image
        bio:
          type: string
          description: User biography
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        score:
          type: number
          description: Profile reputation score
        xp:
          type: integer
          description: Profile experience points
        isShadowProfile:
          type: boolean
          description: Whether this is a shadow profile
    ActivityActor:
      type: object
      properties:
        profileId:
          type: integer
          description: Profile ID
        name:
          type: string
          description: Actor name
        avatarUrl:
          type: string
          description: URL to avatar image
    ActivityInfo:
      oneOf:
        - $ref: '#/VouchActivity'
        - $ref: '#/ReviewActivity'
        - $ref: '#/AttestationActivity'
        - $ref: '#/InvitationAcceptedActivity'
    BulkVotes:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          $ref: '#/VoteInfo'
    VouchActivity:
      type: object
      required:
        - id
        - authorProfileId
        - subjectProfileId
        - comment
        - amount
        - balance
        - activityCheckpoints
      properties:
        id:
          type: integer
          description: Unique identifier for the vouch
        authorProfileId:
          type: integer
          description: Profile ID of the vouch author
        subjectProfileId:
          type: integer
          description: Profile ID of the vouch subject
        subjectAddress:
          type: string
          description: Ethereum address of the vouch subject (if applicable)
        attestationHash:
          type: string
          description: Attestation hash for the vouch (if applicable)
        comment:
          type: string
          description: Comment or message associated with the vouch
        amount:
          type: string
          description: Amount of ETH initially vouched
        balance:
          type: string
          description: Current balance of the vouch
        activityCheckpoints:
          type: object
          required:
            - vouchedAt
            - updatedAt
          properties:
            vouchedAt:
              type: string
              format: date-time
              description: Timestamp when the vouch was created
            updatedAt:
              type: string
              format: date-time
              description: Timestamp when the vouch was last updated
        mutualId:
          type: integer
          nullable: true
          description: ID of the mutual vouch, if one exists
        events:
          type: array
          description: Blockchain events associated with the vouch
          items:
            type: object
            required:
              - id
              - txHash
              - blockNumber
              - timestamp
            properties:
              id:
                type: integer
                description: Unique identifier for the blockchain event
              txHash:
                type: string
                description: Transaction hash of the blockchain event
              blockNumber:
                type: integer
                description: Block number where the event occurred
              timestamp:
                type: string
                format: date-time
                description: Timestamp when the event occurred
        attestationDetails:
          type: object
          nullable: true
          properties:
            service:
              type: string
              description: Service name (e.g., "x.com")
            account:
              type: string
              description: Account identifier on the service
    VouchStatsResponse:
      type: object
      required:
        - staked
        - balance
        - count
        - percentile
      properties:
        staked:
          type: object
          required:
            - received
            - deposited
            - mutual
          properties:
            received:
              type: number
              description: Total amount staked in vouches received
            deposited:
              type: number
              description: Total amount staked in vouches deposited
            mutual:
              type: number
              description: Total amount staked in mutual vouches
        balance:
          type: object
          required:
            - received
            - deposited
            - mutual
          properties:
            received:
              type: number
              description: Current balance in vouches received
            deposited:
              type: number
              description: Current balance in vouches deposited
            mutual:
              type: number
              description: Current balance in mutual vouches
        count:
          type: object
          required:
            - received
            - deposited
            - mutual
          properties:
            received:
              type: integer
              description: Number of vouches received
            deposited:
              type: integer
              description: Number of vouches deposited
            mutual:
              type: integer
              description: Number of mutual vouches
        percentile:
          type: object
          required:
            - received
            - deposited
            - mutual
          properties:
            received:
              type: number
              description: Percentile ranking for vouches received (0-100)
            deposited:
              type: number
              description: Percentile ranking for vouches deposited (0-100)
            mutual:
              type: number
              description: Percentile ranking for mutual vouches (0-100)
    ReviewActivity:
      type: object
      required:
        - id
        - authorProfileId
        - score
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          description: Unique identifier for the review
        authorProfileId:
          type: integer
          description: Profile ID of the review author
        subject:
          type: string
          description: Ethereum address of the review subject (if applicable)
        service:
          type: string
          description: Service name for attestation (if applicable), e.g., "x.com"
        account:
          type: string
          description: Account identifier on the service (if applicable)
        score:
          type: integer
          enum:
            - 0
            - 1
            - 2
          description: 'Review score: 0 (negative), 1 (neutral), 2 (positive)'
        message:
          type: string
          description: Review message or comment
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the review was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the review was last updated
        events:
          type: array
          description: Blockchain events associated with the review
          items:
            type: object
            required:
              - id
              - txHash
              - blockNumber
              - timestamp
            properties:
              id:
                type: integer
                description: Unique identifier for the blockchain event
              txHash:
                type: string
                description: Transaction hash of the blockchain event
              blockNumber:
                type: integer
                description: Block number where the event occurred
              timestamp:
                type: string
                format: date-time
                description: Timestamp when the event occurred
    ReviewStats:
      type: object
      required:
        - received
        - averageReviewForUser
        - positiveReviewPercentage
        - percentile
        - positiveReviewCount
        - negativeReviewCount
        - neutralReviewCount
      properties:
        received:
          type: integer
          description: Total number of reviews received
        averageReviewForUser:
          type: number
          description: Average review score (on a 0-2 scale)
        positiveReviewPercentage:
          type: number
          description: Percentage of positive reviews, excluding neutral reviews
        percentile:
          type: number
          description: Percentile ranking compared to other users (0-100)
        positiveReviewCount:
          type: integer
          description: Number of positive reviews
        negativeReviewCount:
          type: integer
          description: Number of negative reviews
        neutralReviewCount:
          type: integer
          description: Number of neutral reviews
    ReviewStatsMap:
      type: object
      properties:
        byAddress:
          type: object
          description: Statistics for each address
          additionalProperties:
            $ref: '#/ReviewStats'
        byAttestation:
          type: object
          description: Statistics for each attestation
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/ReviewStats'
        total:
          $ref: '#/ReviewStats'
          description: Aggregated statistics across all addresses and attestations
    Reply:
      type: object
      required:
        - parentIsOriginalComment
        - targetContract
        - authorProfileId
        - id
        - parentId
        - createdAt
        - content
      properties:
        parentIsOriginalComment:
          type: boolean
          description: Whether the parent item is the original comment
        targetContract:
          type: string
          format: address
          description: Ethereum address of the contract that the reply is associated with
        authorProfileId:
          type: integer
          description: Profile ID of the reply author
        id:
          type: string
          description: Unique identifier for the reply
        parentId:
          type: string
          description: ID of the parent item this reply is responding to
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp when the reply was created
        content:
          type: string
          description: Text content of the reply
        metadata:
          type: string
          description: Additional metadata for the reply, stored as a JSON string
    ReplySummary:
      type: object
      required:
        - count
        - participated
      properties:
        count:
          type: integer
          description: Number of replies for the parent item
        participated:
          type: boolean
          description: Whether the current user has participated in the discussion
    ReplyQueryRequest:
      type: object
      required:
        - targetContract
        - parentIds
      properties:
        targetContract:
          type: string
          format: address
          description: Ethereum address of the contract that the replies are associated with
        parentIds:
          type: array
          description: Array of parent item IDs to retrieve replies for
          items:
            type: integer
        orderDirection:
          type: string
          enum:
            - asc
            - desc
          default: desc
          description: Sort direction for replies
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results to return
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Number of results to skip for pagination
    ReplyQueryResponse:
      type: object
      required:
        - values
        - limit
        - offset
        - total
      properties:
        values:
          type: array
          description: List of replies matching the query criteria
          items:
            $ref: '#/Reply'
        limit:
          type: integer
          description: Maximum number of results returned
        offset:
          type: integer
          description: Offset of the results
        total:
          type: integer
          description: Total number of replies matching the query criteria
    ReplySummaryRequest:
      type: object
      required:
        - targetContract
        - parentIds
      properties:
        targetContract:
          type: string
          format: address
          description: Ethereum address of the contract that the replies are associated with
        parentIds:
          type: array
          description: Array of parent item IDs to get reply summaries for
          items:
            type: integer
        orderDirection:
          type: string
          enum:
            - asc
            - desc
          default: desc
          description: Sort direction
        currentUserProfileId:
          type: integer
          nullable: true
          description: Profile ID of the current user to check for participation
    ReplySummaryResponse:
      type: object
      description: Object containing reply summaries organized by target contract and parent ID
      additionalProperties:
        type: object
        description: Reply summaries for a specific target contract, keyed by parent ID
        additionalProperties:
          $ref: '#/ReplySummary'
    UpdateUserFCMTokenRequest:
      type: object
      required:
        - token
        - deviceIdentifier
      properties:
        token:
          type: string
          description: Firebase Cloud Messaging token for the user's device
        deviceIdentifier:
          type: string
          description: Unique identifier for the user's device
    UpdateUserFCMTokenResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: string
          enum:
            - created
            - updated
            - unchanged
          description: Result of the operation - 'created' for a new token, 'updated' for an existing token that was changed, or 'unchanged' if the token was already registered
    NotificationPayload:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          description: Title of the notification
        body:
          type: string
          description: Main content of the notification
        image:
          type: string
          description: URL to an image to display in the notification
        badge:
          type: string
          description: URL to a badge icon for the notification
        icon:
          type: string
          description: URL to an icon for the notification
        url:
          type: string
          description: URL that the notification should link to when clicked
    User:
      type: object
      required:
        - id
        - username
        - displayName
        - userkeys
      properties:
        id:
          type: integer
          description: Unique user ID
        username:
          type: string
          description: Username
        displayName:
          type: string
          description: Display name
        userkeys:
          type: array
          items:
            type: string
          description: List of user identifiers (addresses, social handles, etc.)
    UserSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 2
          maxLength: 100
          description: Search query for finding users by name, username, or address
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results to return
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Number of results to skip for pagination
    UserSearchResponse:
      type: object
      required:
        - values
        - total
        - limit
        - offset
      properties:
        values:
          type: array
          items:
            $ref: '#/User'
          description: Array of users matching the search criteria
        total:
          type: integer
          description: Total number of matching users (for pagination)
        limit:
          type: integer
          description: Maximum number of results returned
        offset:
          type: integer
          description: Number of results skipped
    UserStatsRequest:
      type: object
      required:
        - userkey
      properties:
        userkey:
          type: string
          description: User identifier (profile ID, address, or username)
        startDate:
          type: string
          format: date
          description: Optional start date for filtering stats (format YYYY-MM-DD)
        endDate:
          type: string
          format: date
          description: Optional end date for filtering stats (format YYYY-MM-DD)
    UserStatsResponse:
      type: object
      required:
        - reviews
        - vouches
      properties:
        reviews:
          type: object
          required:
            - received
            - positiveReviewPercentage
            - percentile
            - positiveReviewCount
            - negativeReviewCount
            - neutralReviewCount
          properties:
            received:
              type: integer
              description: Total number of reviews received
            positiveReviewPercentage:
              type: number
              format: float
              description: Percentage of positive reviews out of all non-neutral reviews
            percentile:
              type: number
              format: float
              description: User's percentile rank based on reviews (0-100)
            positiveReviewCount:
              type: integer
              description: Number of positive reviews received
            negativeReviewCount:
              type: integer
              description: Number of negative reviews received
            neutralReviewCount:
              type: integer
              description: Number of neutral reviews received
        vouches:
          type: object
          required:
            - staked
            - balance
            - count
            - percentile
          properties:
            staked:
              type: object
              required:
                - received
                - deposited
                - mutual
              properties:
                received:
                  type: number
                  format: float
                  description: Total amount staked in vouches received (in ETH)
                deposited:
                  type: number
                  format: float
                  description: Total amount staked in vouches given (in ETH)
                mutual:
                  type: number
                  format: float
                  description: Total amount staked in mutual vouches (in ETH)
            balance:
              type: object
              required:
                - received
                - deposited
                - mutual
              properties:
                received:
                  type: number
                  format: float
                  description: Current balance in vouches received (in ETH)
                deposited:
                  type: number
                  format: float
                  description: Current balance in vouches given (in ETH)
                mutual:
                  type: number
                  format: float
                  description: Current balance in mutual vouches (in ETH)
            count:
              type: object
              required:
                - received
                - deposited
                - mutual
              properties:
                received:
                  type: integer
                  description: Number of vouches received
                deposited:
                  type: integer
                  description: Number of vouches given
                mutual:
                  type: integer
                  description: Number of mutual vouches
            percentile:
              type: object
              required:
                - received
                - deposited
                - mutual
              properties:
                received:
                  type: number
                  format: float
                  description: Percentile rank for vouches received (0-100)
                deposited:
                  type: number
                  format: float
                  description: Percentile rank for vouches given (0-100)
                mutual:
                  type: number
                  format: float
                  description: Percentile rank for mutual vouches (0-100)
    ExtensionUserInfoResponse:
      type: object
      properties:
        actor:
          $ref: ../schemas/activities.yaml#/ActivityActor
          description: User profile information
        vouchStats:
          $ref: ../schemas/vouches.yaml#/VouchStatsResponse
          description: Vouch statistics
        reviewStats:
          $ref: ../schemas/reviews.yaml#/ReviewStats
          description: Review statistics
        openSlash:
          type: object
          properties:
            slashId:
              type: integer
              description: ID of the open slash
            slug:
              type: string
              description: Slug for the slash URL
            upvotes:
              type: integer
              description: Number of upvotes
            downvotes:
              type: integer
              description: Number of downvotes
          description: Information about an open slash against the user, if any
        market:
          type: object
          description: Market information for the user
    Transaction:
      type: object
      required:
        - hash
        - from_address
        - to_address
        - value
        - block_timestamp
      properties:
        hash:
          type: string
          description: The transaction hash
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
        from_address:
          type: string
          description: The sender address
          example: '0x1234567890abcdef1234567890abcdef12345678'
        from_address_label:
          type: string
          description: The label of the sender address, if available
          example: Alice's Wallet
        from_address_entity_logo:
          type: string
          description: URL to the sender entity logo, if available
          example: https://example.com/logo.png
        to_address:
          type: string
          description: The recipient address
          example: '0x8765432109abcdef8765432109abcdef87654321'
        to_address_label:
          type: string
          description: The label of the recipient address, if available
          example: Bob's Wallet
        to_address_entity_logo:
          type: string
          description: URL to the recipient entity logo, if available
          example: https://example.com/logo2.png
        value:
          type: string
          description: The transaction value
          example: '0.1'
        block_timestamp:
          type: integer
          description: Unix timestamp of the block
          example: 1625097600
        category:
          type: string
          description: Category of the transaction
          example: transfer
        summary:
          type: string
          description: Human-readable summary of the transaction
          example: Transferred 0.1 ETH to Bob's Wallet
    Interaction:
      type: object
      required:
        - address
        - last_transaction_timestamp
        - transactions
      properties:
        address:
          type: string
          description: The Ethereum address involved in the interaction
          example: '0x8765432109abcdef8765432109abcdef87654321'
        last_transaction_timestamp:
          type: integer
          description: Unix timestamp of the most recent transaction
          example: 1625097600
        transactions:
          type: array
          description: List of transactions between the addresses
          items:
            $ref: '#/Transaction'
    Relationship:
      type: object
      required:
        - address
        - last_transaction_timestamp
        - transactions
      properties:
        address:
          type: string
          description: The Ethereum address involved in the relationship
          example: '0x8765432109abcdef8765432109abcdef87654321'
        last_transaction_timestamp:
          type: integer
          description: Unix timestamp of the most recent transaction
          example: 1625097600
        transactions:
          type: array
          description: List of transactions between the addresses
          items:
            $ref: '#/Transaction'
        reviews:
          type: array
          description: List of reviews between the users
          items:
            $ref: ../schemas/reviews.yaml#/ReviewActivity
        vouch:
          type: object
          description: Vouch information between the users, if available
          $ref: ../schemas/vouches.yaml#/VouchActivity
    RecentTransactionsRequest:
      type: object
      required:
        - address
        - connected
      properties:
        address:
          type: string
          description: The primary Ethereum address to query transactions for
          example: '0x1234567890abcdef1234567890abcdef12345678'
        connected:
          type: string
          description: The other Ethereum address to find transactions with
          example: '0x8765432109abcdef8765432109abcdef87654321'
        pagination:
          type: object
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of transactions to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of transactions to skip
    RecentTransactionsResponse:
      type: object
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          required:
            - values
            - limit
            - offset
            - total
          properties:
            values:
              type: array
              items:
                $ref: '#/Transaction'
              description: List of transactions matching the query
            limit:
              type: integer
              description: Maximum number of transactions returned
              example: 10
            offset:
              type: integer
              description: Number of transactions skipped
              example: 0
            total:
              type: integer
              description: Total count of transactions matching the query
              example: 42
    RecentInteractionsRequest:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          description: The Ethereum address to query interactions for
          example: '0x1234567890abcdef1234567890abcdef12345678'
        pagination:
          type: object
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of interactions to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of interactions to skip
    RecentInteractionsResponse:
      type: object
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          required:
            - values
            - limit
            - offset
            - total
          properties:
            values:
              type: array
              items:
                $ref: '#/Relationship'
              description: List of relationships with other addresses
            limit:
              type: integer
              description: Maximum number of interactions returned
              example: 10
            offset:
              type: integer
              description: Number of interactions skipped
              example: 0
            total:
              type: integer
              description: Total count of interactions found
              example: 42
    SearchQueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query for finding profiles, users, ENS names, or addresses
          minLength: 2
          maxLength: 100
          example: alice
        pagination:
          type: object
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of results to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of results to skip for pagination
    SearchQueryResponse:
      type: object
      required:
        - values
        - total
        - limit
        - offset
      properties:
        values:
          type: array
          items:
            $ref: ../schemas/activities.yaml#/ActivityActor
          description: List of actors matching the search query
        total:
          type: integer
          description: Total number of matches found
          example: 42
        limit:
          type: integer
          description: Maximum number of results returned in this response
          example: 10
        offset:
          type: integer
          description: Number of results skipped for pagination
          example: 0
    MarketSearchQueryRequest:
      type: object
      properties:
        query:
          type: string
          description: Optional search query for finding markets. If not provided, returns all markets.
          example: ethos
    MarketSearchQueryResponse:
      type: object
      required:
        - values
      properties:
        values:
          type: array
          items:
            $ref: '#/MarketProfile'
          description: List of market profiles matching the search query
    MarketProfile:
      type: object
      required:
        - profileId
        - name
        - address
        - price
        - supply
        - marketCap
      properties:
        profileId:
          type: string
          description: The profile ID associated with this market
          example: profile_abc123
        name:
          type: string
          description: The name of the profile
          example: Alice Johnson
        username:
          type: string
          description: The username associated with the profile, if available
          example: alice
        avatarUrl:
          type: string
          description: URL to the profile's avatar image
          example: https://example.com/avatar.png
        address:
          type: string
          description: The contract address for this market
          example: '0x1234567890abcdef1234567890abcdef12345678'
        price:
          type: string
          description: The current price of the market token
          example: '0.125'
        priceChange24h:
          type: string
          description: The price change percentage in the last 24 hours
          example: '5.2'
        supply:
          type: string
          description: The total supply of tokens
          example: '1000'
        holders:
          type: integer
          description: The number of token holders
          example: 42
        marketCap:
          type: string
          description: The market capitalization
          example: '125.0'
        volume24h:
          type: string
          description: Trading volume in the last 24 hours
          example: '32.5'
    Invitation:
      type: object
      required:
        - id
        - senderProfileId
        - recipientAddress
        - status
        - dateInvited
      properties:
        id:
          type: string
          description: The unique identifier of the invitation
          example: 123-0x1234567890abcdef1234567890abcdef12345678
        senderProfileId:
          type: integer
          description: The profile ID of the user who sent the invitation
          example: 123
        recipientAddress:
          type: string
          format: address
          description: The Ethereum address of the invitation recipient
          example: '0x1234567890abcdef1234567890abcdef12345678'
        status:
          type: string
          enum:
            - ACCEPTED
            - INVITED
            - ACCEPTED_OTHER_INVITATION
          description: The current status of the invitation
        recipientScoreImpact:
          $ref: '#/ScoreChange'
        senderScoreImpact:
          $ref: '#/ScoreChange'
        dateInvited:
          type: string
          format: date-time
          description: The date and time when the invitation was sent
        dateAccepted:
          type: string
          format: date-time
          description: The date and time when the invitation was accepted (if applicable)
    ScoreImpact:
      type: string
      enum:
        - POSITIVE
        - NEGATIVE
        - NEUTRAL
      description: The impact of a score change
    ScoreChange:
      type: object
      required:
        - value
        - impact
      properties:
        value:
          type: integer
          description: The absolute value of the score change
          minimum: 0
          example: 10
        impact:
          $ref: '#/ScoreImpact'
    ScoreSimulationResult:
      type: object
      required:
        - value
        - relativeValue
        - impact
        - adjustedRecipientScore
      properties:
        value:
          type: integer
          description: The absolute value of the score change
          minimum: 0
          example: 10
        relativeValue:
          type: integer
          description: The relative value of the score change (positive or negative)
          example: 10
        impact:
          $ref: '#/ScoreImpact'
        adjustedRecipientScore:
          type: integer
          description: The new score after adjustment
          example: 85
    InvitationQueryRequest:
      type: object
      required:
        - invitedBy
      properties:
        invitedBy:
          type: integer
          description: The profile ID of the user who sent the invitations
          example: 123
        pagination:
          type: object
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 100
              default: 10
              description: Maximum number of results to return
            offset:
              type: integer
              minimum: 0
              default: 0
              description: Number of results to skip for pagination
    InvitationQueryResponse:
      type: object
      required:
        - values
        - total
        - limit
        - offset
      properties:
        values:
          type: array
          items:
            $ref: '#/Invitation'
          description: List of invitations matching the query
        total:
          type: integer
          description: Total number of matches found
          example: 42
        limit:
          type: integer
          description: Maximum number of results returned in this response
          example: 10
        offset:
          type: integer
          description: Number of results skipped for pagination
          example: 0
    PendingInvitation:
      type: object
      required:
        - id
        - impact
      properties:
        id:
          type: integer
          description: The profile ID of the user who sent the invitation
          example: 123
        impact:
          $ref: '#/ScoreSimulationResult'
    PendingInvitationsResponse:
      type: array
      items:
        $ref: '#/PendingInvitation'
      description: A list of pending invitations with their associated score impact
